################
# Properties can either be set in server.properties or each individual app.properties.  If a property is set in server.properties then that property
# is set for all applications.  Otherwise if the property is set in an individual application's app.properties, then the property is set for that
# application.
#
################
# mountpoint = /
# 
# Defines where the root object of the application is located in Axiom's URI space.
#################
# staticMountpoint = /static
#
# Defines where static content is served out on Axiom's URI space. 
#################
# static.0 = path/to/static/files
# static.1 = path/to/more/static/files
#
# The static list specifics a series of directories to be staticly served through Axiom. Files in lower-number repositories override 
# higher-numbered ones. The paths can be absolute (e.g. c:/path/to/static/files) or relative (e.g. path/to/static/files). 
# If the path is relative, then it is interpreted as relative to the current directory where the app.properties file is residing.
#################
# draftHost.1 = staging.domain.com 
# draftHost.2 = preview.domain.com
#
# The draftHost property allows you to specify different layers on which objects exist. By default, all objects are created and stored in the "live" 
# layer. The draftHost allows you to define other layers at which objects can exist. In the above example, any request with the domain of 
# staging.domain.com that creates and persists objects will persist them in layer 1. Any request with the domain of preview.domain.com that creates 
# and persists objects will persist them in layer 2. Objects in layer X can see all objects in its layer and all those above it. Objects in the top 
# layer (the "live" layer) are only exposed to the objects on its own layer since it is the top most layer. 
#################
# baseuri = /
#
# Set's the application URL prefix
#################
# dbHome = db
#
# Defines the location on the file system of the database directory.
#################
# appHome = apps
#
# Defines the location on the file system of the application directory.
#################
# logdir = log
#
# Defines the location on the file system of the log directory.
#################
# accessLog = access
#
# Name of access log
#################
# eventLog = event
#
# Name of the event log
#################
# errorLog = error
#
# Name of the error log
#################
# modules = some_module, some_other_module
#
# The modules property contains a comma seperated list of code repositories you want to load as modules or libraries for use by your application. 
# They are loaded in order from last to first, so definitions in the module listed before will override ones listed after. 
# For example, if some_module and some_other_module both define a function foo, the definition in some_module takes precedence. 
#################
# db.blob.dir = /absolute/path/to/binary/content
#
# The absolute path to where binary files are stored (File/Image objects). If this property is not specified, the default location of storage 
# is $AXIOM_HOME/db/app_name/blob.
#################
# tmpdir = /tmp
#
# Defines the location on disk where temporary files stored.
#################
# uploadLimit = 200000
#
# Hard limit on http request size, in kilobytes. Requests over this size will be rejected by Axiom. 
#################
# cachesize = 1000
#
# The cachesize specifies the maximum number of Axiom objects to keep in cache for the given application at any point in time. This example 
# indicates that 1000 objects can be in the cache at any point in time, and if the number of objects loaded into the system exceeds 1000, then a 
# LRU policy is used to replace objects in the cache. 
#################
# filter.cache.timeout
#
# Specifies the timeout in milliseconds of the objects in cache, set by cachesize
#################
# maxThreads = 500
#
# The maximum number of simultaneous requests the server can handle. Any additional simultaneous requests will wait until a request is completed 
# and threads are relinquished. 
#################
# minThreads = 0
#
# The minimum number of simultaneous requests the server can handle. 
#################
# sessionTimeout = 360
#
# Specifies the amount of time to elapse before a session times out. The value is specified in minutes, so the above example indicates that 
# sessions inside Axiom automatically timeout after 6 hours. 
#################
# requesttimeout = 60
#
# Specifies the timeout for HTTP request in seconds
#################
# requestTimeoutStop = true/false
#
# Determines if request timeouts are enabled
#################
# schedulerInterval = 60
#
# The interval in which the scheduler run sin seconds, the scheduler performs periodic tasks like executing the scheduler method and 
# kicking out expired user sessions.
#################
# language = english
#
# Sets the language locale for this instance of the Java Virtual Machine.
#################
# country = us
#
# Sets the country locale for this instance of the Java Virtual Machine.
#################
# timezone = GMT
#
# Sets the timezone for this instance of the Java Virtual Machine.
#################
# imagemagick = /path/to/directory/containing/convert
#
# Required for Image API Specifies the filesystem location of the Imagemagick convert executable, which is used for image 
# resizing and thumbnail creation. 
#################
# doctype = <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
#
# If specified, all XML object responses (e.g. res.write(xml_object)) will be prepended with the doctype value. 
#################
# enableRequestLog = true/false 
#
# Turn on the request logging. This will log all incoming requests to axiom-appname-request.log in Apache Common Log format, which in turn can 
# be processed by popular statistical analysis tools such as AWStats
#################
# cookieDomain = example.com
#
# Specifies the domain across which user sessions persist. Must be specified to in order have a session work across all subdomains of a domain. 
#################
# debug = true/false
#
# Specifies whether additional debug information should be included in the log files. A value of true indicates the additional logging should 
# occur, while a value of false indicates to suppress the additional logging. Production systems will most likely want to set the value to false 
# to prevent unnecessary logging that could consume I/O cycles. 
#################
# autoResourceUpdate = true/false
# 
# Specifies whether changes to resources in any of the code repositories gets automatically loaded by Axiom without a restart. During development 
# you will want this set to true for convenience of not having to restart Axiom everytime you make a code change. During deployment, you will most
# likely want to set this to false as it improves performance if Axiom is not constantly checking for code/resource updates. 
#################
# omitxmldeclaration = true/false
#
# Determines if the XML declaration is written in the response, can be defined for quirks mode
#################
# propertyFilesIgnoreCase = true/false
#
# Determines if properties files (application, server, prototype) ignore case in resolving properties
#################
# charset = ISO-8859-1
#
# Defines the character encoding to be used for responses
#################
# httpUserAgent = Mozilla/<version>....
#
# Defines the httpUserAgent in GlobalObject's getURL method.
#################
# hrefFunction = someFunction
#
# The name of a function to be called to postprocess the result of the getURI() function. The function should take single argument (the result 
# of the getURI function) and return the modified string result.
#################
# cron.<cron_name>.hour = <hour>
# cron.<cron_name>.minute = <minute>
# cron.<cron_name>.function = <global_function>
#
# The specification of a cron job at <hour>:<minute> which runs <global_function>. You can specify multiple cron jobs in an app.properties file. 
#################
# onStart = onStart1, onStart2
#
# Specifies a comma seperated list of global functions to be invoked on application startup. If this property is not specified, the default
# is to just invoke the onStart method, if one is defined. In the above example, on application startup, the global methods onStart1 and onStart2 
# will get invoked. 
#################
# unauthorized = someFunction
#
# The security model allows for someone to access the system based on some roles or by overriding the security using a predefined function.
# By default you can just define the unauthorized function on the AxiomObject prototype, or you can define another method and declare it here
#################
# error = someFunction
#
# When you have an error from a request you want to handle that inside the application, you can define the method errpr method on the AxiomObject
# prototype or you can define another method and declare it here.
#################
# notfound = someFunction
#
# When you have a 404 from a request you want to handle that inside the application, you can define the method notfound method on the AxiomObject
# prototype or you can define another method and declare it here.
#################
# loggerFactory = axiom.util.Logging
#
# Setting the loggerFactory class, gives the ability to override and extend the current Axiom logging implentation.  Make sure that the custom
# loggerFactory class is in Axiom's classpath upon startup.
#################
# securityManager = axiom.main.AxiomSecurityManager
#
# Setting the securityManager class, gives the ability to override and extend the current Axiom Security Manager implentation.  Make sure 
# that the custom securityManager class is in Axiom's classpath upon startup.
#################
# sessionManagerImpl = axiom.ext.sessionmanager
#
# Setting the sessionManagerImpl class, gives the ability to override and extend the current Axiom Session Manager implentation.  Make sure 
# that the custom Session Manager class is in Axiom's classpath upon startup.
#################
# scriptingEngine = axiom.scripting.rhino.RhinoEngine
#
# Currently the only scripting environment engine supported is RhinoEngine
#################
# rhino.debug = true/false
#
# Determines if rhino level debugging has been enabled
#################
# rhino.optlevel = 0-9
#
# If rhino debugging is enabled, the optlevel defaults to 0, however it may be defined to the following
#
# -1 
# Interpretive mode is always used. The compilation time is minimized at the expense of runtime performance. No class files are generated, which 
# may improve memory usage depending on your system. Another benefit of the interpreted mode is that the interpreter performs tail-call elimination 
# of recursive functions. Also, you must use this optimization level if your code uses Continuation objects. 
# If the optimization package is not available, then optimization acts as if it is always -1. 
#
# 0 
# No optimizations are performed. The bytecode compiler runs fastest in this mode, but the generated byte code is less efficient. 
#
# 1-9 
# All optimizations are performed. Simple data and type flow analysis is performed to determine which JavaScript variables can be allocated to 
# Java VM registers, and which variables are used only as Numbers. Local common sub-expressions are collapsed (currently this only happens for 
# property lookup, but in the future more expressions may be optimized). All local variables and parameters are allocated to Java VM registers. 
# Function call targets are speculatively pre-cached (based on the name used in the source) so that dispatching can be direct, pending runtime 
# confirmation of the actual target. Arguments are passed as Object/Number pairs to reduce conversion overhead.
#################


