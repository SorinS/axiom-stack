#################
# security.properties
#
# This file is defined on a per prototype basis.  This means that you must create a security.properties file in each prototype directory you create to
# allow actions other than main to be accessible or to disallow access to the main method of that prototype.
#
# The security model uses a few systems.  The key, and most important, piece to the security model is that it is "Secure by Default".  The only action 
# that is available by default to Anyone is main.  The security model allows for someone to access the system based on some roles or by overriding 
# the security using a predefined function.  Also, the security system uses inheritance.  Meaning, that if my parent's main method is only allowed to 
# Authorized users, then my methods are only allowed to Authorized users. 
#
# Secure by Default, rhis means that nobody can access a method from its URL without it being defined in the security.properties file.  Therefore 
# you will receive an unauthorized error when you attempt to access something that is "Secure by Default". 
#
# Actions 
# Actions are your methods that are accessible from the URL. 
#
# e.g.
# main, MemberDirectory, AddToCart, shell 
#
# Roles 
# Roles are the definitions that allow access to certain Actions. 
#
# There are two predefined roles: 
# @Anyone - Anyone who visits the Action. 
# @Authenticated - Any person who has an active session.user object. 
#
# You too can define roles. You just use a string (eg. Admin, Content Manager, Jimmy) 
#
# Variable Roles 
# You can define variables for roles so that you can shorten the amount of text required for copying and pasting. You delimit multiple roles with 
# commas. 
#
# You do this with the following: 
# $access_roles = Administrator,Jimmy 
# $IMIS = Administrator,ibos,imis 
# $cms = @Authenticated 
#
# What a security.properties would look like:
#
# main = @Authenticated
# MemberDirectory = $IMIS
# AddToCart = @Authenticated
# shell = $access_roles, @Authenticated
#################
