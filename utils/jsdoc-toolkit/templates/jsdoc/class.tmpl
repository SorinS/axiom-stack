<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
	<head>
	<title>Axiom Stack - Learn</title>	
		<link href="css/global.css" rel="stylesheet" type="text/css"/>
	</head>
	<body class="section learn">
		<div id="wrapper">
			<div class="innerwrap">
				<div class="header">
					<div class="nav">
						<a href="http://www.axiomstack.com/" rel="home">Home</a> | 
						<span>
							<a href="http://www.axiomstack.com/about/">ABOUT</a><span> |</span>
						</span>
						<span>
							<a class="current" href="http://www.axiomstack.com/learn/">LEARN</a><span> |</span>
						</span>
						<span>
							<a href="http://www.axiomstack.com/download/">DOWNLOAD</a><span> |</span>
						</span>
						<span>
							<a href="http://www.axiomstack.com/community/">COMMUNITY</a><span> |</span>
						</span>
						<span>
							<a href="http://www.axiomstack.com/contact/">CONTACT US</a><span> |</span>
						</span>
						<span>
							<a href="http://www.axiomstack.com/company/">COMPANY</a>
						</span>
					</div>
					<div class="logo">
						<a href="http://www.axiomstack.com/"><img alt="Axiom Stack" src="images/logo.gif" title="Axiom Stack"/></a>
					</div>
					<div class="headlines">
						<h1>Documentation</h1>
						<h2>tutorials, references and technical specifications</h2>
					</div>
				</div>
				<div class="main">
					<div id="bodyContent">

<!-- ============================== classes index ============================ -->
		<div id="index">
			<!-- begin publish.classesIndex -->
			{+publish.classesIndex+}
			<!-- end publish.classesIndex -->
		</div>
		{! Link.base = ""; !}
		<div id="content">
<!-- ============================== object evaluation ========================== -->
			{!
				var objectType = getObjectType(data);
				if(objectType == 'builtin'){
					for each(tag in data.comment.tags){
						if(tag.title.equalsIgnoreCase('jsnoconstructor')){
							objectType = tag.title;
						}
					}
				}
			!}

<!-- ============================== class title ============================ -->
			<h1 class="classTitle">
				{!
					var classType = "";
					if(data.alias == '_global_'){
						classType = "Global Functions ";
						output += classType;
					} else if (data.isNamespace) {
						classType = "Prototype Extension ";
						output += data.alias;
					} else if (objectType == 'jsnoconstructor' || objectType == 'global') {
						classType = "Object ";
						output += data.alias;
					} else {
						classType = "Prototype ";
						output += data.alias;
					}
				!}
			</h1>

<!-- ============================== class summary ========================== -->			
			<p class="description">
				<if test="data.augments.length"><br />Extends
					{+
						data.augments
						.sort()
						.map(
							function($) { return new Link().toClass($); }
						)
						.join(", ")
					+}.<br />
				</if>
				{+resolveLinks(data.classDesc)+}
				
			</p>

<!-- ============================== constructor summary ==================== -->			
			<if test="!data.isBuiltin() && (data.isNamespace || data.is('CONSTRUCTOR'))">
			<table class="summaryTable" cellspacing="0" summary="A summary of the constructor documented in the class {+data.alias+}.">
				<caption>{+classType+}Summary</caption>
				<thead>
					<tr>
						<if test="objectType == 'extension' || objectType == 'global' || objectType == 'jsnoconstructor'">
							<th scope="col">Constructor Name and Description</th>
						<else/>
							<if test="data.isPrivate || data.isInner">
								<th scope="col">Constructor Attributes</th>
							</if>
							<th scope="col">Constructor Name and Description</th>
						</if>
					</tr>
				</thead>
				<tbody>
					<tr>
						<if test="objectType == 'extension' || objectType == 'global' || objectType == 'jsnoconstructor'">
							<td class="noconstructorattribs">								
								<div class="description">{+resolveLinks(data.desc)+}</div>
							</td>
						<else/>
							<if test="data.isPrivate || data.isInner">
								<td class="attributes">{!
									if (data.isPrivate) output += "&lt;private&gt; ";
									if (data.isInner) output += "&lt;inner&gt; ";
								!}&nbsp;</td>
							</if>
							<td class="{!output = (data.isPrivate || data.isInner) ? output+= 'nameDescription' : output+= 'noconstructorattribs'!}" {!if (data.comment.getTag("hilited").length){output += 'style="color: red"'}!}>
								<div class="fixedFont">
									<b>{+ new Link().toSymbol(data.alias).inner('constructor')+}</b><if test="classType != 'Namespace '">{+ makeSignature(data.params) +}</if>
								</div>
								<div class="description">{+resolveLinks(summarize(data.desc))+}</div>
							</td>
						</if>
					</tr>
				</tbody>
			</table>
			</if>

<!-- ============================== properties summary ===================== -->
			<if test="data.properties.length">
				{! var ownProperties = data.properties.filter(function($){return $.memberOf == data.alias && !$.isNamespace}).sort(makeSortby("name")); !}
				<if test="ownProperties.length">
				<table class="summaryTable" cellspacing="0" summary="A summary of the fields documented in the class {+data.alias+}.">
					<caption>Field Summary</caption>
					<thead>
						<tr>
							<th scope="col">Field Attributes</th>
							<th scope="col">Field Name and Description</th>
						</tr>
					</thead>
					<tbody>
					<for each="member" in="ownProperties">
						<tr>
							<td class="attributes">{!
								if (member.isPrivate) output += "&lt;private&gt; ";
								if (member.isInner) output += "&lt;inner&gt; ";
								if (member.isStatic) output += "&lt;static&gt; ";
								if (member.isConstant) output += "&lt;constant&gt; ";
									output+= new Link().toClass(member.type);
							!}&nbsp;</td>
							<td class="nameDescription">
								<div class="fixedFont">
								<if test="member.isStatic && member.memberOf != '_global_'">{+member.memberOf+}.</if><b>{+new Link().toSymbol(member.alias).withText(member.name)+}</b>
								</div>
								<div class="description">{+resolveLinks(summarize(member.desc))+}</div>
							</td>
						</tr>
					</for>
					</tbody>
				</table>
				</if>
				
				<if test="data.inheritsFrom.length">
				<dl class="inheritsList">
				{!
					var borrowedMembers = data.properties.filter(function($) {return $.memberOf != data.alias});
					
					var contributers = [];
					borrowedMembers.map(function($) {if (contributers.indexOf($.memberOf) < 0) contributers.push($.memberOf)});
					for (var i = 0, l = contributers.length; i < l; i++) {
						output +=
							"<dt>Fields borrowed from class "+new Link().toSymbol(contributers[i])+": </dt>"
							+
							"<dd>" +
							borrowedMembers
							.filter(
								function($) { return $.memberOf == contributers[i] }
							)
							.sort(makeSortby("name"))
							.map(
								function($) { return new Link().toSymbol($.alias).withText($.name) }
							)
							.join(", ")
							+
							"</dd>";
					}
				!}
				</dl>
				</if>
			</if>

<!-- ============================== methods summary ======================== -->
			<if test="data.methods.length">
				{! var ownMethods = data.methods.filter(function($){return $.memberOf == data.alias  && !$.isNamespace}).sort(makeSortby("name")); !}
				<if test="ownMethods.length">
				<table class="summaryTable" cellspacing="0" summary="A summary of the functions documented in the class {+data.alias+}.">
					<caption>Function Summary</caption>
					<thead>
						<tr>
							<th scope="col">Function Attributes</th>
							<th scope="col">Function Name and Description</th>
						</tr>
					</thead>
					<tbody>
					<for each="member" in="ownMethods">
						<tr>
							<td class="attributes">{!
								if (member.isPrivate) output += "&lt;private&gt; ";
								if (member.isInner) output += "&lt;inner&gt; ";
								if (member.isStatic) output += "&lt;static&gt; ";
								{#if(!member.isPrivate && !member.isInner && !member.isStatic){#}
									var retType = "";
									for each(ret in member.returns){
										if(ret.title.equalsIgnoreCase('return') && ret.type == '' && ret.desc.equalsIgnoreCase('void')){
											retType = 'void';
										} else if(ret.title.equalsIgnoreCase('return')){
											retType = ret.type;
										}
									}
									if(retType == 'void' || retType == ''){
										output += 'void';
									} else {
										output += new Link().toClass(retType);
									}
								{#}#}
							!}&nbsp;</td>
							<td class="nameDescription">
								<div class="fixedFont"><if test="member.isStatic && member.memberOf != '_global_'">{+member.memberOf+}.</if><b>{+new Link().toSymbol(member.alias).withText(member.name)+}</b>{+makeSignature(member.params)+}
								</div>
								<div class="description">{+resolveLinks(summarize(member.desc))+}</div>
							</td>
						</tr>
					</for>
					</tbody>
				</table>
				</if>
				
				<if test="data.inheritsFrom.length">
				<dl class="inheritsList">
				{!
					var borrowedMembers = data.methods.filter(function($) {return $.memberOf != data.alias});
					var contributers = [];
					borrowedMembers.map(function($) {if (contributers.indexOf($.memberOf) < 0) contributers.push($.memberOf)});
					for (var i = 0, l = contributers.length; i < l; i++) {
						output +=
							"<dt>Functions borrowed from class "+new Link().toSymbol(contributers[i])+": </dt>"
							+
							"<dd>" +
							borrowedMembers
							.filter(
								function($) { return $.memberOf == contributers[i] }
							)
							.sort(makeSortby("name"))
							.map(
								function($) { return new Link().toSymbol($.alias).withText($.name) }
							)
							.join(", ")
							+
							"</dd>";
					}
				
				!}
				</dl>
				</if>
			</if>

<!-- ============================== constructor details ==================== -->		

			<if test="objectType == 'builtin'">
			<div class="details"><a name="constructor"> </a>
				<div class="sectionTitle">
					{+classType+}Detail
				</div>
				
				<div class="fixedFont">{!
					if (data.isPrivate) output += "&lt;private&gt; ";
					if (data.isInner) output += "&lt;inner&gt; ";
				!}
						<b>{+ data.alias +}</b><if test="classType != 'Namespace '">{+ makeSignature(data.params) +}</if>
				</div>
				
				<div class="description">
					{+resolveLinks(data.desc)+}
					<if test="data.author"><br /><i>Author: </i>{+data.author+}.</if>
				</div>
				
				<if test="data.example">
				<pre class="code">{+data.example+}</pre>
				</if>
				
				
					<if test="data.params.length">
						<dl class="detailList">
						<dt class="heading">Parameters:</dt>
						<for each="item" in="data.params">
							<dt>
								{+((item.type)?""+("<span class=\"light fixedFont\">{"+(new Link().toSymbol(item.type)+"}</span> ")) : "")+} <b>{+item.name+}</b>
								<if test="item.isOptional"><i>Optional<if test="item.defaultValue">, Default: {+item.defaultValue+}</if></i></if>
							</dt>
								<dd>{+resolveLinks(item.desc)+}</dd>
						</for>
						</dl>
					</if>
					<if test="data.deprecated">
						<dl class="detailList">
						<dt class="heading">Deprecated:</dt>
						<dt>
							{+resolveLinks(data.deprecated)+}
						</dt>
						</dl>
					</if>
					<if test="data.since.length">
						<dl class="detailList">
						<dt class="heading">Since:</dt>
						<for each="item" in="data.since">
							<dd>{+ item +}</dd>
						</for>
						</dl>
					</if>
					<if test="data.exceptions.length">
						<dl class="detailList">
						<dt class="heading">Throws:</dt>
						<for each="item" in="data.exceptions">
							<dt>
								{+((item.type)?"<span class=\"light fixedFont\">{"+(new Link().toSymbol(item.type))+"}</span> " : "")+} <b>{+item.name+}</b>
							</dt>
								<dd>{+resolveLinks(item.desc)+}</dd>
						</for>
						</dl>
					</if>
					<if test="data.returns.length">
						<dl class="detailList">
						<dt class="heading">Returns:</dt>
						<for each="item" in="data.returns">
								<dd>{+((item.type)?"<span class=\"light fixedFont\">{"+(new Link().toSymbol(item.type))+"}</span> " : "")+}{+resolveLinks(item.desc)+}</dd>
						</for>
						</dl>
					</if>
					<if test="data.requires.length">
						<dl class="detailList">
						<dt class="heading">Requires:</dt>
						<for each="item" in="data.requires">
							<dd>{+ resolveLinks(item) +}</dd>
						</for>
						</dl>
					</if>
					<if test="data.see.length">
						<dl class="detailList">
						<dt class="heading">See:</dt>
						<for each="item" in="data.see">
							<dd>{+ new Link().toSymbol(item) +}</dd>
						</for>
						</dl>
					</if>

			</div>
			</if>

<!-- ============================== field details ========================== -->		
			<if test="defined(ownProperties) && ownProperties.length">
				<div class="sectionTitle">
					Field Detail
				</div>
				<for each="member" in="ownProperties">
					<a name="{+Link.symbolNameToLinkName(member)+}"> </a>
					<div class="fixedFont">{!
						if (member.isPrivate) output += "&lt;private&gt; ";
						if (member.isInner) output += "&lt;inner&gt; ";
						if (member.isStatic) output += "&lt;static&gt; ";
						if (member.isConstant) output += "&lt;constant&gt; ";
					!}
					
					<if test="member.type"><span class="light">{{+new Link().toSymbol(member.type)+}}</span></if>
					<if test="member.isStatic && member.memberOf != '_global_'"><span class="light">{+member.memberOf+}.</span></if><b>{+member.name+}</b>
					
					</div>
					<div class="description">
						{+resolveLinks(member.desc)+}
						<if test="member.author"><br /><i>Author: </i>{+member.author+}.</if>
					</div>
					
					<if test="member.example">
					<pre class="code">{+member.example+}</pre>
					</if>
				
					
						<if test="member.deprecated">
							<dl class="detailList">
							<dt class="heading">Deprecated:</dt>
							<dt>
								{+ member.deprecated +}
							</dt>
							</dl>
						</if>
						<if test="member.since.length">
							<dl class="detailList">
							<dt class="heading">Since:</dt>
								<dd>{+ member.since +}</dd>
							</dl>
						</if>
						<if test="member.see.length">
							<dl class="detailList">
							<dt class="heading">See:</dt>
							<for each="item" in="member.see">
							<dd>{+ new Link().toSymbol(item) +}</dd>
							</for>
							</dl>
						</if>
						<if test="member.defaultValue">
							<dl class="detailList">
							<dt class="heading">Default Value:</dt>
							<dd>
								{+resolveLinks(member.defaultValue)+}
							</dd>
							</dl>
						</if>

					<if test="!$member_last"><hr /></if>
				</for>
			</if>

<!-- ============================== method details ========================= -->		
			<if test="defined(ownMethods) && ownMethods.length">
				<div class="sectionTitle">
					Function Detail
				</div>
				<for each="member" in="ownMethods">
					<a name="{+Link.symbolNameToLinkName(member)+}"> </a>
					<div class="fixedFont">{!
						if (member.isPrivate) output += "&lt;private&gt; ";
						if (member.isInner) output += "&lt;inner&gt; ";
						if (member.isStatic) output += "&lt;static&gt; ";
					!}
					
					<if test="member.type"><span class="light">{{+new Link().toSymbol(member.type)+}}</span></if>
					<if test="member.isStatic && member.memberOf != '_global_'"><span class="light">{+member.memberOf+}.</span></if><b>{+member.name+}</b>{+makeSignature(member.params)+}
					
					</div>
					<div class="description">
						{+resolveLinks(member.desc)+}
						<if test="member.author"><br /><i>Author: </i>{+member.author+}.</if>
					</div>
					
					<if test="member.example">
					<pre class="code">{+member.example+}</pre>
					</if>
					
					
						<if test="member.params.length">
							<dl class="detailList">
							<dt class="heading">Parameters:</dt>
							<for each="item" in="member.params">
								<dt>
									{+((item.type)?"<span class=\"light fixedFont\">{"+(new Link().toSymbol(item.type))+"}</span> " : "")+}<b>{+item.name+}</b>
									<if test="item.isOptional"><i>Optional<if test="item.defaultValue">, Default: {+item.defaultValue+}</if></i></if>
								</dt>
								<dd>{+resolveLinks(item.desc)+}</dd>
							</for>
							</dl>
						</if>
						<if test="member.deprecated">
							<dl class="detailList">
							<dt class="heading">Deprecated:</dt>
							<dt>
								{+member.deprecated+}
							</dt>
							</dl>
						</if>
						<if test="member.since.length">
							<dl class="detailList">
							<dt class="heading">Since:</dt>
								<dd>{+ member.since +}</dd>
							</dl>
							</dl>
						</if>
						<if test="member.exceptions.length">
							<dl class="detailList">
							<dt class="heading">Throws:</dt>
							<for each="item" in="member.exceptions">
								<dt>
									{+((item.type)?"<span class=\"light fixedFont\">{"+(new Link().toSymbol(item.type))+"}</span> " : "")+} <b>{+item.name+}</b>
								</dt>
								<dd>{+resolveLinks(item.desc)+}</dd>
							</for>
							</dl>
						</if>
						<if test="member.returns.length">
							<dl class="detailList">
							<dt class="heading">Returns:</dt>
							<for each="item" in="member.returns">
								<dd>{+((item.type)?"<span class=\"light fixedFont\">{"+(new Link().toSymbol(item.type))+"}</span> " : "")+}{+resolveLinks(item.desc)+}</dd>
							</for>
							</dl>
						</if>
						<if test="member.requires.length">
							<dl class="detailList">
							<dt class="heading">Requires:</dt>
							<for each="item" in="member.requires">
								<dd>{+ resolveLinks(item) +}</dd>
							</for>
							</dl>
						</if>
						<if test="member.see.length">
							<dl class="detailList">
							<dt class="heading">See:</dt>
							<for each="item" in="member.see">
								<dd>{+ new Link().toSymbol(item) +}</dd>
							</for>
							</dl>
						</if>

					<if test="!$member_last"><hr /></if>
				</for>
			</if>
			
			<hr />
		</div>
		
<!-- ============================== footer ================================= -->
		<div class="fineprint" style="clear:both">
			<if test="JSDOC.opt.D.copyright">&copy;{+JSDOC.opt.D.copyright+}<br /></if>
			Documentation generated by <a href="http://www.jsdoctoolkit.org/" target="_blank">JsDoc Toolkit</a> {+JSDOC.VERSION+} on {+new Date()+}
		</div>
					</div>
				</div>
			</div>	
			<div id="footer">
				<div class="innerwrap">
					<div class="nav">
						<a href="http://www.axiomstack.com/" rel="home">Home</a>
						<span>
							<a href="http://www.axiomstack.com/about/">ABOUT</a><span> </span>
						</span>
						<span>
							<a class="current" href="http://www.axiomstack.com/learn/">LEARN</a><span> </span>
						</span>
						<span>
							<a href="http://www.axiomstack.com/download/">DOWNLOAD</a><span> </span>
						</span>
						<span>
							<a href="http://www.axiomstack.com/community/">COMMUNITY</a><span> </span>
						</span>
						<span>
							<a href="http://www.axiomstack.com/contact/">CONTACT US</a><span> </span>
						</span>
						<span>
							<a href="http://www.axiomstack.com/company/">COMPANY</a>
						</span>
					</div>
					<div class="vcard">
						<span class="fn">Axiom Software, Inc.</span>
						<div class="adr">
							<div class="street-address">11480 Commerce Park Drive, Third Floor</div>
							<span class="locality">Reston</span>, 
							<span class="region">Virginia</span> 
							<span class="postal-code">20191</span>
						</div>
					</div>
					<div class="legal">&copy; 2008 Axiom Software, Inc. All Rights Reserved<span>|</span><a href="http://www.axiomstack.com/license-agreement">License Agreement &amp; Privacy Policy</a></div>
				</div>
			</div>
		</div>
	</body>
</html>
