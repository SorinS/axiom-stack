<?xml version="1.0"?>
<project name="stack-trunk" default="all" basedir=".">
    <!-- =================================================================== -->
    <!-- Initializes some variables                                          -->
    <!-- =================================================================== -->
	
    <property name="project" value="axiom"/>
	<property name="home.dir" value="."/>
	<property name="build.dir" value="${home.dir}/build"/>
	<property name="lib.dir" value="${home.dir}/lib"/>
	<property name="src.dir" value="${home.dir}/src"/>
	<property name="apps.dir" value="${home.dir}/apps"/>
	<property name="release.dir" value="${home.dir}/release"/>
	<property name="modules.dir" value="${home.dir}/modules"/>
	<property name="jsdoc.dir" value="${home.dir}/doc"/>
	<property name="javadoc.dir" value="${home.dir}/javadoc"/>
	<property name="utils.dir" value="${home.dir}/utils"/>
	<property name="examples.dir" value="${home.dir}/examples"/>
	<property name="test-config.dir" value="${home.dir}/test"/>
	<property name="java.version.default" value="1.6"/>
	<property name="axiom-jar.name" value="axiom.jar"/>
	<property name="launcher-jar.name" value="launcher.jar"/>
	<property name="js-jar.name" value="js.zip"/>
	<property name="test.app" value="test"/>
	<!-- <property name="axiom_version" value="3.2.9"/> -->
	<property name="base_dir" value="axiom-stack-${axiom_version}"/>
	<property environment="env"/>

	
	<path id="classpath">
        <fileset dir="${lib.dir}">
            <include name="**/*.jar" />
        </fileset>
        <fileset dir="${env.JAVA_HOME}/lib">
	    	<include name="tools.jar"/>
        </fileset>
	</path>

	<target name="all" depends="build"/>
	
	<target name="init">
		<mkdir dir="${build.dir}"/>
		<mkdir dir="${build.dir}/classes"/>
    </target>
	
	<target name="clean">
		<delete file="${home.dir}/${launcher-jar.name}"/>
		<delete file="${lib.dir}/${axiom-jar.name}"/>
		<delete file="${lib.dir}/${js-jar.name}"/>
		<delete dir="${build.dir}"/>
		<delete dir="${jsdoc.dir}"/>
		<delete dir="${javadoc.dir}"/>
		<delete dir="${test-config.dir}"/>
		<delete dir="${release.dir}"/>
	</target>

	<target name="build" depends="clean, init">
		<condition property="java_version"
			value="${env.JAVA_VERSION}"
			else="${java.version.default}">
			<and>
				<isset property="env.JAVA_VERSION"/>
			</and>
		</condition>

		<antcall target="jar">
			<param name="version" value="${java_version}"/>
		</antcall>		
	</target>

	<target name="compile" depends="init">
		<property name="deprecation" value="off"/>
		<property name="debug" value="on"/>
        <property name="optimize" value="on"/>
		<property name="encoding" value="utf-8" /> 

		<condition property="version"
			value="${java.version.default}">
			<not>
				<isset property="version"/>
			</not>
		</condition>

		<javac srcdir="${src.dir}/java"
 			encoding="${encoding}"
            source="${version}"
            target="${version}"
	    	destdir="${build.dir}/classes"
            debug="${debug}"
            deprecation="${deprecation}"
            optimize="${optimize}">
            <classpath refid="classpath" />
        </javac>
	</target>
	
	<target name="jszip" description="Packages the JS Zip">
		<condition property="jar-lib.dir" value="${jar.lib.dir}"
					else="${lib.dir}">
			<and>
				<isset property="jar.lib.dir"/>
			</and>
		</condition>
		<delete file="${jar-lib.dir}/js.zip" />

		<zip compress="false" destfile="${jar-lib.dir}/js.zip" 
			     basedir="${src.dir}/js"/>
	</target>
	
	<target name="jar" depends="compile" description="Packages the JAR file">
		<condition property="jar-lib.dir"
			value="${jar.lib.dir}"
			else="${lib.dir}">
			<and>
				<isset property="jar.lib.dir"/>
			</and>
		</condition>

		<condition property="jar-home.dir"
			value="${jar.home.dir}"
			else="${home.dir}">
			<and>
				<isset property="jar.home.dir"/>
			</and>
		</condition>

			<!-- Build axiom.jar-->
		<jar jarfile="${jar-lib.dir}/${axiom-jar.name}"
            basedir="${build.dir}/classes"
	    	excludes="**/test/**, **/main/launcher/**"/>

		<!-- build js.zip -->
		<antcall target="jszip">
			<param name="jar-lib.dir" value="${jar-lib.dir}" />
		</antcall>

		<!-- Build launcher.jar -->
		<jar jarfile="${jar-home.dir}/${launcher-jar.name}"
            basedir="${build.dir}/classes"
            includes="**/main/launcher/**"
            manifest="${src.dir}/java/axiom/main/launcher/manifest.txt"/>
	</target>

	<target name="javadoc">
		<javadoc sourcepath="${src.dir}/java" 
			destdir="${javadoc.dir}" 
			packagenames="*" 
			classpathref="classpath"/>
	</target>

	<target name="jsdoc" depends="compile">
		<condition property="doc.dir"
			value="${docdir}"
			else="${jsdoc.dir}">
			<and>
				<isset property="docdir"/>
			</and>
		</condition>
		
		<javadoc 
			doclet="axiom.util.JSDoclet" 
			docletpath="${build.dir}/classes/" 
			sourcepath="${src.dir}/java"
			classpathref="classpath">
			<packageset dir="${src.dir}/java" defaultexcludes="yes">
				<include name="axiom/**"/>
			</packageset>
		</javadoc>

		<java jar="${utils.dir}/jsdoc-toolkit/jsrun.jar" fork="true">
			<arg line="${utils.dir}/jsdoc-toolkit/app/run.js -t=${utils.dir}/jsdoc-toolkit/templates/jsdoc/ -d=${doc.dir} alldoc.js ${src.dir}/js/Global ${src.dir}/js-for-doc/"/>
		</java>
		
		<copy todir="${doc.dir}/css">
			<fileset dir="${utils.dir}/jsdoc-toolkit/templates/jsdoc/static/css"/>
		</copy>
		
		<copy todir="${doc.dir}/images">
			<fileset dir="${utils.dir}/jsdoc-toolkit/templates/jsdoc/static/images"/>
		</copy>

		<delete file="alldoc.js"/>
	</target>

	<target name="test-util">
		<condition property="app"
			value="${appname}"
			else="test">
			<and>
				<isset property="appname"/>
			</and>
		</condition>
		
		<condition property="applicationdir"
			value="${appdir}"
			else="apps">
			<and>
				<isset property="appdir"/>
			</and>
		</condition>

		<condition property="java_version"
			value="${env.JAVA_VERSION}"
			else="${java.version.default}">
			<and>
				<isset property="env.JAVA_VERSION"/>
			</and>
		</condition>

		<property name="test-app.dir" value="${test-config.dir}/${app}"/>
		
		<mkdir dir="${test-app.dir}"/> 
		<mkdir dir="${test-app.dir}/lib"/> 
		<mkdir dir="${test-app.dir}/${applicationdir}"/>

		<copy todir="${test-app.dir}/lib">
			<fileset dir="${lib.dir}"/>
		</copy>

		<copy todir="${test-app.dir}/${applicationdir}/${app}">
			<fileset dir="${apps.dir}/${app}" excludes="server.properties"/>
		</copy>

		<move file="${test-app.dir}/${applicationdir}/${app}/app.properties.run"
			tofile="${test-app.dir}/${applicationdir}/${app}/app.properties"/>

		<copy todir="${test-app.dir}/">
			<fileset file="${apps.dir}/${app}/server.properties"/>
		</copy>

		<antcall target="jar">
			<param name="version" value="${java_version}"/>
			<param name="jar.home.dir" value="${test-app.dir}"/>
			<param name="jar.lib.dir" value="${test-app.dir}/lib"/>
		</antcall>

		<java jar="${test-app.dir}/launcher.jar" fork="true" timeout="150000">
			<sysproperty key="file.encoding" value="UTF-8"/>
			<sysproperty key="org.apache.lucene.FSDirectory.class" value="org.apache.lucene.store.TransFSDirectory"/>
			<arg line="-w 8082 -h ${test-app.dir}"/>
		</java>

	</target>
	
	<target name="test" depends="clean">
		<antcall target="test-util">
			<param name="appname" value="test"/>
		</antcall>

		<antcall target="test-util">
			<param name="appname" value="test-app-config"/>
		</antcall>

		<antcall target="test-util">
			<param name="appname" value="test-server-config"/>
			<param name="appdir" value="applications"/>
		</antcall>

	</target>
	
	<target name="release">

		<condition property="ver">
			<isset property="axiom_version"/>
		</condition>
		<fail message="To build a release, 'version' must be set" unless="ver"/>

		<exec executable="./release.sh">
		    <arg value="${axiom_version}"/>
		</exec>

		<mkdir dir="${release.dir}/${base_dir}"/>

		<copy todir="${release.dir}/${base_dir}">
			<fileset dir="${home.dir}" 
				includes="start.bat, 
					start.sh, 
					build.xml, 
					license.txt, 
					README.txt, 
					server.properties"/>
		</copy>
		
		<copy todir="${release.dir}/${base_dir}/src">
			<fileset dir="${src.dir}"/>
		</copy>

		<copy todir="${release.dir}/${base_dir}/lib">
			<fileset dir="${lib.dir}"/>
		</copy>

		<copy todir="${release.dir}/${base_dir}/apps">
			<fileset dir="${apps.dir}"/>
		</copy>

		<copy todir="${release.dir}/${base_dir}/utils">
			<fileset dir="${utils.dir}"/>
		</copy>
		
		<copy todir="${release.dir}/${base_dir}/examples">
			<fileset dir="${examples.dir}"/>
		</copy>

		<condition property="java_version"
			value="${env.JAVA_VERSION}"
			else="${java.version.default}">
			<and>
				<isset property="env.JAVA_VERSION"/>
			</and>
		</condition>

		<antcall target="jar">
			<param name="version" value="${java_version}"/>
			<param name="jar.home.dir" value="${release.dir}/${base_dir}"/>
			<param name="jar.lib.dir" value="${release.dir}/${base_dir}/lib"/>
		</antcall>

		<antcall target="jsdoc">
			<param name="docdir" value="${release.dir}/${base_dir}/doc"/>
		</antcall>
		
		<echo file="${release.dir}/${base_dir}/version.txt" message="${axiom_version}" />
		
		<zip destfile="${home.dir}/axiom-stack-${axiom_version}.zip"
		       basedir="${release.dir}"/>
		<tar destfile="${home.dir}/axiom-stack-${axiom_version}.tar"
			basedir="${release.dir}"/>
		<gzip destfile="${home.dir}/axiom-stack-${axiom_version}.tar.gz"
			src="${home.dir}/axiom-stack-${axiom_version}.tar"/>
		<zip destfile="${home.dir}/axiom-stack-docs-${axiom_version}.zip"
				       basedir="${release.dir}/${base_dir}/doc"/>
		
		<delete file="${home.dir}/axiom-stack-${axiom_version}.tar"/>
		<delete dir="${release.dir}"/>
	</target>
	
</project>